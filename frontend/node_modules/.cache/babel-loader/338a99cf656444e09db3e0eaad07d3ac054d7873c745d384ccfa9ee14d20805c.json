{"ast":null,"code":"import apiClient from './apiClient';\nclass AuthService {\n  /**\r\n   * Login user with email and password\r\n   */\n  async login(email, password) {\n    try {\n      const response = await apiClient.post('/auth/login', {\n        email,\n        password\n      });\n      return response.data;\n    } catch (error) {\n      console.error('Login service error:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Logout user\r\n   */\n  async logout() {\n    try {\n      await apiClient.post('/auth/logout');\n    } catch (error) {\n      console.error('Logout service error:', error);\n      // Don't throw error for logout - we want to clear local state anyway\n    }\n  }\n\n  /**\r\n   * Get current user information\r\n   */\n  async getCurrentUser() {\n    try {\n      const response = await apiClient.get('/auth/me');\n      return response.data;\n    } catch (error) {\n      console.error('Get current user error:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Refresh authentication token\r\n   */\n  async refreshToken() {\n    try {\n      const response = await apiClient.post('/auth/refresh');\n      return response.data;\n    } catch (error) {\n      console.error('Token refresh error:', error);\n      throw error;\n    }\n  }\n\n  /**\r\n   * Check if user is authenticated\r\n   */\n  isAuthenticated() {\n    const token = localStorage.getItem('auth_token');\n    return !!token;\n  }\n\n  /**\r\n   * Get stored auth token\r\n   */\n  getToken() {\n    return localStorage.getItem('auth_token');\n  }\n\n  /**\r\n   * Clear auth token\r\n   */\n  clearToken() {\n    localStorage.removeItem('auth_token');\n  }\n}\nexport const authService = new AuthService();","map":{"version":3,"names":["apiClient","AuthService","login","email","password","response","post","data","error","console","logout","getCurrentUser","get","refreshToken","isAuthenticated","token","localStorage","getItem","getToken","clearToken","removeItem","authService"],"sources":["C:/Users/pc/employee-attendance-system/frontend/src/services/authService.ts"],"sourcesContent":["import apiClient from './apiClient';\r\nimport { User } from '../contexts/AuthContext';\r\n\r\nexport interface LoginResponse {\r\n  token: string;\r\n  user: User;\r\n  expiresIn: number;\r\n}\r\n\r\nexport interface LoginRequest {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nclass AuthService {\r\n  /**\r\n   * Login user with email and password\r\n   */\r\n  async login(email: string, password: string): Promise<LoginResponse> {\r\n    try {\r\n      const response = await apiClient.post<LoginResponse>('/auth/login', {\r\n        email,\r\n        password,\r\n      });\r\n      return response.data;\r\n    } catch (error: any) {\r\n      console.error('Login service error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Logout user\r\n   */\r\n  async logout(): Promise<void> {\r\n    try {\r\n      await apiClient.post('/auth/logout');\r\n    } catch (error: any) {\r\n      console.error('Logout service error:', error);\r\n      // Don't throw error for logout - we want to clear local state anyway\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current user information\r\n   */\r\n  async getCurrentUser(): Promise<User> {\r\n    try {\r\n      const response = await apiClient.get<User>('/auth/me');\r\n      return response.data;\r\n    } catch (error: any) {\r\n      console.error('Get current user error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Refresh authentication token\r\n   */\r\n  async refreshToken(): Promise<LoginResponse> {\r\n    try {\r\n      const response = await apiClient.post<LoginResponse>('/auth/refresh');\r\n      return response.data;\r\n    } catch (error: any) {\r\n      console.error('Token refresh error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if user is authenticated\r\n   */\r\n  isAuthenticated(): boolean {\r\n    const token = localStorage.getItem('auth_token');\r\n    return !!token;\r\n  }\r\n\r\n  /**\r\n   * Get stored auth token\r\n   */\r\n  getToken(): string | null {\r\n    return localStorage.getItem('auth_token');\r\n  }\r\n\r\n  /**\r\n   * Clear auth token\r\n   */\r\n  clearToken(): void {\r\n    localStorage.removeItem('auth_token');\r\n  }\r\n}\r\n\r\nexport const authService = new AuthService();"],"mappings":"AAAA,OAAOA,SAAS,MAAM,aAAa;AAcnC,MAAMC,WAAW,CAAC;EAChB;AACF;AACA;EACE,MAAMC,KAAKA,CAACC,KAAa,EAAEC,QAAgB,EAA0B;IACnE,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAML,SAAS,CAACM,IAAI,CAAgB,aAAa,EAAE;QAClEH,KAAK;QACLC;MACF,CAAC,CAAC;MACF,OAAOC,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAU,EAAE;MACnBC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAMA,KAAK;IACb;EACF;;EAEA;AACF;AACA;EACE,MAAME,MAAMA,CAAA,EAAkB;IAC5B,IAAI;MACF,MAAMV,SAAS,CAACM,IAAI,CAAC,cAAc,CAAC;IACtC,CAAC,CAAC,OAAOE,KAAU,EAAE;MACnBC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C;IACF;EACF;;EAEA;AACF;AACA;EACE,MAAMG,cAAcA,CAAA,EAAkB;IACpC,IAAI;MACF,MAAMN,QAAQ,GAAG,MAAML,SAAS,CAACY,GAAG,CAAO,UAAU,CAAC;MACtD,OAAOP,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAU,EAAE;MACnBC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,MAAMA,KAAK;IACb;EACF;;EAEA;AACF;AACA;EACE,MAAMK,YAAYA,CAAA,EAA2B;IAC3C,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAML,SAAS,CAACM,IAAI,CAAgB,eAAe,CAAC;MACrE,OAAOD,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAU,EAAE;MACnBC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;MAC5C,MAAMA,KAAK;IACb;EACF;;EAEA;AACF;AACA;EACEM,eAAeA,CAAA,EAAY;IACzB,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IAChD,OAAO,CAAC,CAACF,KAAK;EAChB;;EAEA;AACF;AACA;EACEG,QAAQA,CAAA,EAAkB;IACxB,OAAOF,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;EAC3C;;EAEA;AACF;AACA;EACEE,UAAUA,CAAA,EAAS;IACjBH,YAAY,CAACI,UAAU,CAAC,YAAY,CAAC;EACvC;AACF;AAEA,OAAO,MAAMC,WAAW,GAAG,IAAIpB,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}