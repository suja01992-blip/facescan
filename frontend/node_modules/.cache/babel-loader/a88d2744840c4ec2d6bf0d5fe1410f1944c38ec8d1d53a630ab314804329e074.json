{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\pc\\\\employee-attendance-system\\\\frontend\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { toast } from 'react-toastify';\nimport { authService } from '../services/authService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const isAuthenticated = !!user;\n  useEffect(() => {\n    // Check if user is already logged in on app start\n    const initializeAuth = async () => {\n      try {\n        const token = localStorage.getItem('auth_token');\n        if (token) {\n          // Verify token and get user info\n          const userData = await authService.getCurrentUser();\n          setUser(userData);\n        }\n      } catch (error) {\n        console.error('Auth initialization failed:', error);\n        localStorage.removeItem('auth_token');\n      } finally {\n        setLoading(false);\n      }\n    };\n    initializeAuth();\n  }, []);\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      const response = await authService.login(email, password);\n\n      // Store token\n      localStorage.setItem('auth_token', response.token);\n\n      // Set user data\n      setUser(response.user);\n      toast.success(`Welcome back, ${response.user.firstName}!`);\n    } catch (error) {\n      var _error$response, _error$response$data;\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || error.message || 'Login failed';\n      toast.error(errorMessage);\n      throw error;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = () => {\n    try {\n      // Call logout API\n      authService.logout();\n\n      // Clear local storage\n      localStorage.removeItem('auth_token');\n\n      // Reset user state\n      setUser(null);\n      toast.info('You have been logged out successfully');\n    } catch (error) {\n      console.error('Logout error:', error);\n      // Still clear local state even if API call fails\n      localStorage.removeItem('auth_token');\n      setUser(null);\n    }\n  };\n  const refreshToken = async () => {\n    try {\n      const response = await authService.refreshToken();\n      localStorage.setItem('auth_token', response.token);\n      setUser(response.user);\n    } catch (error) {\n      console.error('Token refresh failed:', error);\n      logout();\n    }\n  };\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    login,\n    logout,\n    refreshToken\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 116,\n    columnNumber: 10\n  }, this);\n};\n_s(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","toast","authService","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","user","setUser","loading","setLoading","isAuthenticated","initializeAuth","token","localStorage","getItem","userData","getCurrentUser","error","console","removeItem","login","email","password","response","setItem","success","firstName","_error$response","_error$response$data","errorMessage","data","message","logout","info","refreshToken","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/pc/employee-attendance-system/frontend/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { toast } from 'react-toastify';\r\nimport { authService } from '../services/authService';\r\n\r\nexport interface User {\r\n  id: number;\r\n  email: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  role: 'ADMIN' | 'EMPLOYEE';\r\n}\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  isAuthenticated: boolean;\r\n  loading: boolean;\r\n  login: (email: string, password: string) => Promise<void>;\r\n  logout: () => void;\r\n  refreshToken: () => Promise<void>;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  const isAuthenticated = !!user;\r\n\r\n  useEffect(() => {\r\n    // Check if user is already logged in on app start\r\n    const initializeAuth = async () => {\r\n      try {\r\n        const token = localStorage.getItem('auth_token');\r\n        if (token) {\r\n          // Verify token and get user info\r\n          const userData = await authService.getCurrentUser();\r\n          setUser(userData);\r\n        }\r\n      } catch (error) {\r\n        console.error('Auth initialization failed:', error);\r\n        localStorage.removeItem('auth_token');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    initializeAuth();\r\n  }, []);\r\n\r\n  const login = async (email: string, password: string): Promise<void> => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await authService.login(email, password);\r\n      \r\n      // Store token\r\n      localStorage.setItem('auth_token', response.token);\r\n      \r\n      // Set user data\r\n      setUser(response.user);\r\n      \r\n      toast.success(`Welcome back, ${response.user.firstName}!`);\r\n    } catch (error: any) {\r\n      const errorMessage = error.response?.data?.message || error.message || 'Login failed';\r\n      toast.error(errorMessage);\r\n      throw error;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const logout = (): void => {\r\n    try {\r\n      // Call logout API\r\n      authService.logout();\r\n      \r\n      // Clear local storage\r\n      localStorage.removeItem('auth_token');\r\n      \r\n      // Reset user state\r\n      setUser(null);\r\n      \r\n      toast.info('You have been logged out successfully');\r\n    } catch (error) {\r\n      console.error('Logout error:', error);\r\n      // Still clear local state even if API call fails\r\n      localStorage.removeItem('auth_token');\r\n      setUser(null);\r\n    }\r\n  };\r\n\r\n  const refreshToken = async (): Promise<void> => {\r\n    try {\r\n      const response = await authService.refreshToken();\r\n      localStorage.setItem('auth_token', response.token);\r\n      setUser(response.user);\r\n    } catch (error) {\r\n      console.error('Token refresh failed:', error);\r\n      logout();\r\n    }\r\n  };\r\n\r\n  const value: AuthContextType = {\r\n    user,\r\n    isAuthenticated,\r\n    loading,\r\n    login,\r\n    logout,\r\n    refreshToken,\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};\r\n\r\nexport const useAuth = (): AuthContextType => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}